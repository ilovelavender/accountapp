/*
 * This file is generated by jOOQ.
 */
package ru.olegr.accountapp.model.generated.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.olegr.accountapp.model.generated.Indexes;
import ru.olegr.accountapp.model.generated.Keys;
import ru.olegr.accountapp.model.generated.Public;
import ru.olegr.accountapp.model.generated.tables.records.TransactionsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>public.transactions.id</code>.
     */
    public final TableField<TransactionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.transactions.txn_id</code>.
     */
    public final TableField<TransactionsRecord, String> TXN_ID = createField(DSL.name("txn_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.transactions.created_at</code>.
     */
    public final TableField<TransactionsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.transactions.from_account_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> FROM_ACCOUNT_ID = createField(DSL.name("from_account_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transactions.to_account_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> TO_ACCOUNT_ID = createField(DSL.name("to_account_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transactions.amount</code>.
     */
    public final TableField<TransactionsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(40, 2).nullable(false), this, "");

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    /**
     * Create a <code>public.transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    public <O extends Record> Transactions(Table<O> child, ForeignKey<O, TransactionsRecord> key) {
        super(child, key, TRANSACTIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_TRANSACTIONS_FROM_ACC_ID, Indexes.IX_TRANSACTIONS_TO_ACC_ID);
    }

    @Override
    public Identity<TransactionsRecord, Integer> getIdentity() {
        return (Identity<TransactionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.PK_TRANSACTIONS;
    }

    @Override
    public List<UniqueKey<TransactionsRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionsRecord>>asList(Keys.PK_TRANSACTIONS);
    }

    @Override
    public List<ForeignKey<TransactionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionsRecord, ?>>asList(Keys.TRANSACTIONS__FK_TRANSACTIONS_FROM_ACC_ID, Keys.TRANSACTIONS__FK_TRANSACTIONS_TO_ACC_ID);
    }

    private transient Accounts _fkTransactionsFromAccId;
    private transient Accounts _fkTransactionsToAccId;

    public Accounts fkTransactionsFromAccId() {
        if (_fkTransactionsFromAccId == null)
            _fkTransactionsFromAccId = new Accounts(this, Keys.TRANSACTIONS__FK_TRANSACTIONS_FROM_ACC_ID);

        return _fkTransactionsFromAccId;
    }

    public Accounts fkTransactionsToAccId() {
        if (_fkTransactionsToAccId == null)
            _fkTransactionsToAccId = new Accounts(this, Keys.TRANSACTIONS__FK_TRANSACTIONS_TO_ACC_ID);

        return _fkTransactionsToAccId;
    }

    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, LocalDateTime, Integer, Integer, BigDecimal> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
