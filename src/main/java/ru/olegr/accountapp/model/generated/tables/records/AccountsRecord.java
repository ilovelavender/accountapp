/*
 * This file is generated by jOOQ.
 */
package ru.olegr.accountapp.model.generated.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.olegr.accountapp.model.generated.tables.Accounts;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsRecord extends UpdatableRecordImpl<AccountsRecord> implements Record4<Integer, LocalDateTime, String, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.accounts.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.accounts.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.accounts.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.accounts.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>public.accounts.number</code>.
     */
    public void setNumber(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.accounts.number</code>.
     */
    public String getNumber() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.accounts.balance</code>.
     */
    public void setBalance(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.accounts.balance</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDateTime, String, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, LocalDateTime, String, BigDecimal> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Accounts.ACCOUNTS.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Accounts.ACCOUNTS.CREATED_AT;
    }

    @Override
    public Field<String> field3() {
        return Accounts.ACCOUNTS.NUMBER;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Accounts.ACCOUNTS.BALANCE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreatedAt();
    }

    @Override
    public String component3() {
        return getNumber();
    }

    @Override
    public BigDecimal component4() {
        return getBalance();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreatedAt();
    }

    @Override
    public String value3() {
        return getNumber();
    }

    @Override
    public BigDecimal value4() {
        return getBalance();
    }

    @Override
    public AccountsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AccountsRecord value2(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public AccountsRecord value3(String value) {
        setNumber(value);
        return this;
    }

    @Override
    public AccountsRecord value4(BigDecimal value) {
        setBalance(value);
        return this;
    }

    @Override
    public AccountsRecord values(Integer value1, LocalDateTime value2, String value3, BigDecimal value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountsRecord
     */
    public AccountsRecord() {
        super(Accounts.ACCOUNTS);
    }

    /**
     * Create a detached, initialised AccountsRecord
     */
    public AccountsRecord(Integer id, LocalDateTime createdAt, String number, BigDecimal balance) {
        super(Accounts.ACCOUNTS);

        setId(id);
        setCreatedAt(createdAt);
        setNumber(number);
        setBalance(balance);
    }
}
